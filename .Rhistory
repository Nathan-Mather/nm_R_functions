#=================================================#
# ==== Replicate optimal 2 bracket income tax ====
#=================================================#
library(data.table)
library(ggplot2)
library(NMOF)
library(dplyr)
library(radiant.data)
# clear data and consol
rm(list = ls(pos = ".GlobalEnv"), pos = ".GlobalEnv")
options(scipen = 999)
cat("\f")
#============================#
# ==== set up parameters ====
#============================#
n_cons <- 1000
# set some parms to runthrough functions with
epsilon <- .2
v <- 1
R <- 0
# specify some vales to test this with
G <- 0.0933
t1 <- .37
t2 <- .323
y_bar <- .306
#=======================#
# ==== set up wages ====
#=======================#
# get an even distribution for cumulative freuency
cons_dt <- data.table(c_freq = seq(from = .0005, to = .9995, length.out = n_cons))
# generate wages from log normal with parameters from slemrod 1994
cons_dt[, wages := qlnorm(c_freq, -1, .39)]
# plot wages as a check
d <- density(cons_dt$wages)
plot(d)
# make wage vector
in_w_v <- cons_dt$wages
w <- in_w_v
# get minium wage
min_wage <- min(in_w_v)
#==========================================#
# ==== set alpha circa stern 76 pg 140 ====
#==========================================#
# write alpha function
alpha_fun <- function(m_w, epsilon){
if(epsilon != 1){
temp <- (1/2)^(1/epsilon)*m_w^((epsilon-1)/epsilon)
alpha <- 1/(1 + temp)
}else{
alpha <- (1/3)
}
return(alpha)
}
# get mean wage
m_w <- mean(in_w_v)
# get alpha
temp <- 1/(4*m_w)
alpha <- 1/(1+temp)
alpha_fun(m_w = m_w, epsilon = 1)
alpha_fun(m_w = m_w, epsilon = .9)
alpha_fun(m_w = m_w, epsilon = .8)
alpha_fun(m_w = m_w, epsilon = .6)
alpha_fun(m_w = m_w, epsilon = .5)
alpha_fun(m_w = m_w, epsilon = .4)
alpha_fun(m_w = m_w, epsilon = .2)
#===========================#
# ==== consumer utility ====
#===========================#
# write out consumer utility funciton
c_u_func_ces <- function(in_L, in_c, alpha, epsilon){
rho <- (epsilon-1)/epsilon
utility <- (alpha*in_c^rho + (1-alpha)*(1-in_L)^rho)^(1/rho)
#Note find a better way, this shit is slow
utility[which(in_c < 0)] <- 0
return(utility)
}
# write out the function for it epsilon == 1 (cob douglas)
c_u_func_CD <- function(in_L, in_c, alpha, epsilon){
utility <- (in_c^alpha)*((1-in_L)^(1-alpha))
#Note find a better way, this shit is slow
utility[which(in_c < 0)] <- 0
}
#=======================#
# ==== Consumer max ====
#=======================#
#========================#
# ==== bracekt 1 max ====
#========================#
# first write a funciton for consumer's linear maximization over bracket one
consumer_max_func_b1 <- function(w, t1, G, alpha, epsilon, min_wage){
if(epsilon == 1){
# if interior this is Labor
L_star <- alpha - (G*(1-alpha))/(w*(1-t1))
# find the cutoff wage for people working 0
cut_w <- (G*(1-alpha))/(alpha*(1-t1))
if(cut_w >= min_wage){
# anyone who wants to work negative will be best off working zero
L_star[which(L_star < 0)] <- 0
}
#Note should find cut wage and fix this
L_star[which(L_star > 1)] <- 1
# Now get C from the budget constraing since we have some edge cases
# c_star <- alpha*w*(1-t1) + alpha*G
c_star <- L_star*w*(1-t1) + G
utility <- c_u_func_ces(in_L = L_star, in_c = c_star, alpha = alpha, epsilon = epsilon)
out_data <- list(wage = w, L_star= L_star, c_star =c_star, utility = utility)
return(out_data)
}
if(epsilon == 0){
stop("Need leontif perfect substitute production")
}
phi <- ((1-alpha)/(alpha*w*(1-t1)))^(-epsilon)
L_star <- (phi - G)/(w*(1-t1) + phi)
# calculate cut wage where people start working zero
cut_w <- G^(1/epsilon)*(1-alpha)/(alpha*(1-t1))
# if some people are above this wage fix their labor values
if(cut_w >= min_wage | G < 0){
L_star[which(L_star < 0)] <- 0
}
#Note should find cut wage and fix this
L_star[which(L_star > 1)] <- 1
c_star <- w*L_star*(1-t1) + G
utility <- c_u_func_ces(in_L = L_star, in_c = c_star, alpha = alpha, epsilon = epsilon)
out_data <- list(wage = w, L_star= L_star, c_star =c_star, utility = utility)
return(out_data)
}
# # test it
# consumer_max_func_b1(w = in_w_v, t1 = .356, G = .09, alpha = alpha, epsilon = .2, min_wage = min_wage)
#
#========================#
# ==== bracket 2 max ====
#========================#
# also write funciton for second bracket
consumer_max_func_b2 <- function(w, t1, t2, y_bar, G, alpha, epsilon, min_wage){
if(epsilon == 1){
# if interior this is Labor
L_star <- alpha - ((G + y_bar*(t2-t1))*(1-alpha))/(w*(1-t2))
# find the cutoff wage for people working 0
cut_w <- ((G + y_bar*(t2-t1))*(1-alpha))/(alpha*(1-t2))
if(cut_w >= min_wage){
# anyone who wants to work negative will be best off working zero
L_star[which(L_star < 0)] <- 0
}
# should also find cut wage for this but not now #NOTE
L_star[which(L_star > 1)] <- 1
# Now get C from the budget constraing since we have some edge cases
c_star <- L_star*w*(1-t2) + G + y_bar*(t2-t1)
utility <- c_u_func_ces(in_L = L_star, in_c = c_star, alpha = alpha, epsilon = epsilon)
out_data <- list(wage = w, L_star= L_star, c_star =c_star, utility = utility)
return(out_data)
}
if(epsilon == 0){
stop("Need leontif perfect substitute production")
}
phi <- ((1-alpha)/(alpha*w*(1-t2)))^(-epsilon)
L_star <- (phi - G - y_bar*(t2-t1))/(w*(1-t2) + phi)
#Note I should do the cut wage thing to save time but havnt solve it yet
L_star[which(L_star < 0)] <- 0
L_star[which(L_star > 1)] <- 1
c_star <- w*L_star*(1-t2) + G + y_bar*(t2-t1)
utility <- c_u_func_ces(in_L = L_star, in_c = c_star, alpha = alpha, epsilon = epsilon)
out_data <- list(wage = w, L_star= L_star, c_star =c_star, utility = utility)
return(out_data)
}
# # test funciton
# consumer_max_func_b2(w = in_w_v, t1 = t1, t2 = t2, y_bar = y_bar, G = G, alpha = alpha, epsilon = epsilon, min_wage = min_wage)
#
#========================#
# ==== piecewise max ====
#========================#
# now write funciton for peicwise maximization
consumer_max_func_pw <- function(in_w_v, t1, t2, y_bar, G, alpha, epsilon, min_wage){
k <- ((1-alpha)/alpha)^epsilon
kink_low_function <- function( w, G, k, t1, epsilon, y_bar){
w + k*w^(1-epsilon)*(-G*(1-t1)^(-epsilon)-y_bar*(1-t1)^(1-epsilon))-y_bar
}
kink_high_function <-  function( w, G, k, t1, t2, epsilon, y_bar){
w -w^(1-epsilon)*(1-t2)^(-epsilon)*k*(G + y_bar*(t2-t1))-k*w^(1-epsilon)*(1-t2)^(1-epsilon)*y_bar-y_bar
}
# now check shape of bedget set
if(t2 <= t1){
# first optimize over each branch
# start with branch 1
b_1_opt <- consumer_max_func_b1(w = in_w_v, t1 = t1, G = G, alpha = alpha, epsilon = epsilon, min_wage = min_wage)
# now branch 2
b_2_opt <- consumer_max_func_b2(w = in_w_v, t1 = t1, t2= t2, y_bar = y_bar, G = G, alpha = alpha, epsilon = epsilon, min_wage = min_wage)
max_v <- radiant.data::which.pmax(b_2_opt$utility, b_1_opt$utility)
b1 <- which(max_v ==2)
b2 <- which(max_v ==1)
opt_list <- setNames(vector("list", length = 4), nm = c("c_star", "L_star", "utility", "wage"))
opt_list[["c_star"]] <- c(b_1_opt$c_star[b1], b_2_opt$c_star[b2])
opt_list[["L_star"]] <- c(b_1_opt$L_star[b1], b_2_opt$L_star[b2])
opt_list[["utility"]] <- c(b_1_opt$utility[b1], b_2_opt$utility[b2])
opt_list[["wage"]] <- c(b_1_opt$wage[b1], b_2_opt$wage[b2])
}else{
# find cut point 1
kink_cut_low <-  uniroot(kink_low_function, lower = 0, upper = 200, tol = 10^(-15), G = G, k = k, t1 = t1, epsilon = epsilon, y_bar =y_bar)
kink_cut_low <- kink_cut_low$root
# find cut point 2
kink_cut_H <-  uniroot(kink_high_function, lower = 0, upper = 10000, tol = 10^(-15), G = G, k = k, t1 = t1, t2 = t2, epsilon = epsilon, y_bar =y_bar)
kink_cut_H <- kink_cut_H$root
# fill in info
b_1_opt <- consumer_max_func_b1(w =  in_w_v[which(in_w_v< kink_cut_low)], t1 = t1, G = G, alpha = alpha, epsilon = epsilon, min_wage = min_wage)
b_2_opt <- consumer_max_func_b2(w = in_w_v[which(in_w_v >= kink_cut_H)], t1 = t1, t2= t2, y_bar = y_bar, G = G, alpha = alpha, epsilon = epsilon, min_wage = min_wage)
# fill in kink values
in_w_v[which(in_w_v> kink_cut_low & in_w_v < kink_cut_H)]
opt_k <- setNames(vector("list", length = 4), nm = c("c_star", "L_star", "utility", "wage"))
opt_k[["wage"]] <- in_w_v[which(in_w_v> kink_cut_low & in_w_v < kink_cut_H)]
opt_k[["L_star"]] <- y_bar/opt_k[["wage"]]
opt_k[["c_star"]] <- opt_k[["wage"]]*opt_k[["L_star"]]*(1-t1) + G
# fill out utility
if(epsilon == 1){
opt_k[["utility"]] <-  c_u_func_CD(in_c = opt_k[["c_star"]],
in_L = opt_k[["L_star"]] ,
alpha = alpha,
epsilon = epsilon)
}else{
opt_k[["utility"]] <-  c_u_func_ces(in_c = opt_k[["c_star"]],
in_L = opt_k[["L_star"]] ,
alpha = alpha,
epsilon = epsilon)
}
# fill in optimu
opt_list <- setNames(vector("list", length = 4), nm = c("c_star", "L_star", "utility", "wage"))
opt_list[["c_star"]] <- c(b_1_opt$c_star, opt_k[["c_star"]], b_2_opt$c_star)
opt_list[["L_star"]] <- c(b_1_opt$L_star,opt_k[["L_star"]], b_2_opt$L_star)
opt_list[["utility"]] <- c(b_1_opt$utility,opt_k[["utility"]], b_2_opt$utility)
opt_list[["wage"]] <- c(b_1_opt$wage,opt_k[["wage"]]  , b_2_opt$wage)
}
# return it
return(opt_list)
}
# # test funciton
# consumer_max_func_pw(in_w_v = in_w_v, t1 = t1, t2 = t2, y_bar = y_bar, G = G, alpha = alpha, epsilon = epsilon, min_wage = min_wage)
#====================================#
# ==== Policy maker optimization ====
#====================================#
# tax_vector = c(0, 0,0)
# this takes wages, alpha, epsilon, v and R as well as 3 pf 4 tax parameters
# it returns the fourth tax parameter G that satisifies the budget and gives social welfare
sw_func <- function(tax_vector, in_w_v, alpha, epsilon, v, R, min_wage, opt_return_g = FALSE, opt_gridsearch = FALSE, opt_plot = FALSE){
# unpack tax vector
t1 <- tax_vector[1L]
t2 <-  tax_vector[2L]
sw_y_bar <- tax_vector[3L]
# g funciton
g_func <- function(G){
# calculate utility for each wage given tax laws and  running G
cons_dt <- consumer_max_func_pw(in_w_v, t1 = t1, t2 = t2, y_bar = sw_y_bar, G, alpha = alpha, epsilon =epsilon, min_wage =  min_wage)
# get net rev
net_rev <- sum(cons_dt$wage*cons_dt$L_star) - sum(cons_dt$c_star)
# compare that to the target
net_rev - R*1000
}
# this isn't what joel did but lets jus tdo this for now to get to a number
G_star <- uniroot(g_func, lower = -1, upper = 1, tol = 10^(-7))
G_star <- G_star$root
# calculate utility for each wage given tax laws and  running G
cons_dt <- consumer_max_func_pw(in_w_v, t1 = t1, t2 = t2, y_bar = sw_y_bar, G = G_star, alpha = alpha, epsilon =epsilon,  min_wage =  min_wage)
# aggregate data in a sW funciton
weighted_utility <- (1/v)*(cons_dt$utility)^v
# aggregate data in a sW funciton
out_sw <- sum(weighted_utility)
# if its a grid search option return negative SW
if(opt_gridsearch){
return(-out_sw)
}
# if I want to return G, do it
if(opt_return_g){
return(data.table(sw = out_sw, G = G_star))
}
if(opt_plot){
# graph utility as a check
plot_util <- ggplot(data = cons_dt, aes(x = wage, y = utility)) + geom_point() + scale_y_continuous(limits = c(0, 1))
return(plot_util)
}
# return SW
return(out_sw)
}
# #========================================#
# # ==== try to figure out whats wrong ====
# #========================================#
#
#   # set some parms to runthrough functions with
#   epsilon <- .2
#
#   v <- 1
#   R <- 0
#
#   # specify some vales to test this with
#   G <- 0.0933
#   t1 <- .37
#   t2 <- .323
#
#   # this looks right to me for t2 < t1
#   sw_func(tax_vector = c(.6, .59,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.6, .5,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.6, .4,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.6, .3,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.6, .2,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.6, .1,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.6, 0,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#
#   # for t2 > t1 this also looks right now
#   sw_func(tax_vector = c(.59, .6,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.5, .6,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.4, .6,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.3, .6,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.2, .6,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.1, .6,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.0, .6,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#
#   # what is happening when I set y_bar = 1? some sort of edge case has gone wrong
#   sw_func(tax_vector = c(.8, 0, 1) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.59, 0, 1) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#   sw_func(tax_vector = c(.4, 0, 1) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_plot = TRUE)
#
#======================#
# ==== grid search ====
#======================#
# intial tests
out <- consumer_max_func_pw(in_w_v = in_w_v, t1 = .6, t2 = .3, y_bar = .306, G = 0.3914151,  alpha = alpha, epsilon = epsilon, min_wage = min_wage)
sum(out$utility)
sw_func(tax_vector = c(.234, .202,.300) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage = min_wage, opt_return_g = TRUE)
sw_func(tax_vector = c(.6, .3,.306) ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage = min_wage )
# set parms
epsilon <- .4
v <- 1
R <- 0
# set levels for grid
levels <- list(t1 = seq(0,.99,length.out = 10),t2 = seq(0,.99,length.out = 10) ,sw_y_bar = seq(0,1,length.out = 10))
# do grid search
start <- Sys.time()
res <- gridSearch(sw_func, levels, in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage = min_wage, opt_gridsearch = TRUE)
r_time <- Sys.time() - start
r_time
res$minlevels
res$minfun
# get optimal G for this tax rate
g_opt <- sw_func(tax_vector = res$minlevels ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_return_g = TRUE)$G
t1_list <- list()
t2_list <- list()
ybar_list <- list()
for(i in 1:length(res$levels)){
t1_list[i] <- res$levels[[i]][[1]]
t2_list[i] <- res$levels[[i]][[2]]
ybar_list[i] <- res$levels[[i]][[3]]
}
res_dt <- data.table(sw = -res$values, t1 = unlist(t1_list), t2 = unlist(t2_list), y_bar = unlist(ybar_list))
#===========================================#
# ==== check every vale un joel's paper ====
#===========================================#
# make output table
v <- c(1, -2)
R <- c( 0, .05, .1)
e <- c(.2, .4, 1)
results <- data.table(expand.grid(v, R, e))
setnames(results, colnames(results), c("v", "R", "e"))
setorder(results, -v, R, e)
mean_w <- mean(in_w_v)
# set up levels for grid serach
in_levels <- list(t1 = seq(0,.99,length.out = 1000))
for(i in 1:nrow(results)){
# grab parms
epsilon <- results[i, e]
v  <- results[i, v]
R <- results[i, R]
# set alpha like joel did
alpha <- alpha_fun(m_w = mean_w, epsilon = 1)
# get optimal tax
res <- gridSearch(sw_func_lin, in_levels, in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage,  opt_gridsearch = TRUE)
# get optimal G for this tax rate
g <- sw_func_lin(t1 = res$minlevels ,in_w_v = in_w_v, alpha = alpha, epsilon = epsilon, v = v, R = R, min_wage =  min_wage, opt_return_g = TRUE)$G
results[i, G := g]
results[i, tax := res$minlevels]
}
round_results <- round(results, 4)
